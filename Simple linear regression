TASK 1 SIMPLE LINEAR REGRESSION
THE SPARKS FOUNDATION
GRADUATE ROTATIONAL INTERNSHIP PROGRAM
PREDICTION USING SUPERVISED ML
#Importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

Reading the data

url=http://bit.ly/w-data
s_data=pd.read_csv(url)
print("Data imported sucessfully")
s_data.head(25)

#plotting the distribution scores
s_dat.plot(x+'Hours', y='Scores', style='o')
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

#Preparing the data
x=s_data.iloc[:,;-1].values
y=s_data.iloc[:,1}.values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.2, random_state=0)

#Training the algorithm
from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(x_train, y_train)

print("Training complete,.")

#Plotting the regression line
line=regressor.coef_*x+regressor.intercept_

#Plotting the test data
plt.scatter(x, y)
plt.plot(x, line);
plot.show()

#Making predictions
print(x_test)
y_pred=regressor.predict(x_test)

Comparing actual and predicted values
df=pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

Testing own data
hours={{9.25}}
own_pred=regressor.predict(hours)
print("No of Hours={}".format(hours))
print("Predicted Score={}".format(own_pred[0]00

#Evaluating the model
from sklearn import metrics
print('Mean Absolute Error:', metric.mean_absolute_error(y_test, y_pred))

